<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!-- 自动扫描 -->
    <context:component-scan base-package="com.jzy.api.base,
                                          com.jzy.api.dao,
                                          com.jzy.api.model,
                                          com.jzy.api.service">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- aop扫描拆分，cat的扫描在spring，参数校验的扫描放到spring mvc，规避参数校验的Validator报错 -->
    <context:component-scan base-package="com.jzy.api.aop"/>
    <aop:aspectj-autoproxy/>
    <import resource="applicationContext-empty.xml"/>
    <import resource="applicationContext-db.xml"/>

    <!-- 引入文件属性 -->
<!--
    <context:property-placeholder location="classpath:config/applicationContext-empty.xml" />
-->
<!--    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:config/applicationContext-empty.xml"/>
    </bean>-->

    <!-- JNDI DataSource for J2EE environments -->
    <bean id="mySqlDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--<property name="driverClassName" value="${jdbc.mysql.driver}"/>-->
        <property name="url" value="${jdbc.mysql.url}"/>
        <property name="username" value="${jdbc.mysql.username}"/>
        <property name="password" value="${jdbc.mysql.password}"/>

        <!-- 配置初始化大小、 最小、 最大 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000"/>

        <!-- 配置一个连接在池中最小生存的时间， 单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>

        <!-- 配置间隔多久才进行一次检测， 检测需要关闭的空闲连接， 单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- mysql 不支持 poolPreparedStatements-->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="50"/>

        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超时时间；单位为秒。180秒=3分钟 -->
        <property name="removeAbandonedTimeout" value="300"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>

        <!-- 开启Druid的监控统计功能 -->
        <property name="filters" value="${jdbc.filter}"/>

    </bean>

    <!-- Excel导出支持异步方法执行 -->
    <task:annotation-driven executor="excelExportAsyncExecutor"/>
    <task:executor id="excelExportAsyncExecutor" pool-size="5"/>

    <!-- 配置和mybatis的整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 设置数据源 -->
        <property name="dataSource" ref="mySqlDataSource"></property>
        <!-- 设置映射文件 -->
        <property name="mapperLocations">
            <list>
                <value>classpath*:/mappers/*.xml</value>
                <value>classpath*:/mappers/**/*.xml</value>
            </list>
        </property>
        <!--设置pageHelper-->
        <property name="configLocation" value="classpath:config/mybatis-config.xml"></property>
    </bean>
    <!-- 配置扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描素有的dao接口的实现，加入到容器中 -->
        <property name="basePackage" value="com.jzy.api.dao"></property>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="mySqlDataSource" />
    </bean>

    <!-- 配置事务通知属性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 定义事务传播属性 -->
        <tx:attributes>
            <tx:method name="*login" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="run*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="new*" propagation="REQUIRED" />
            <tx:method name="set*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="change*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />
<!--            <tx:method name="*" propagation="REQUIRED" read-only="true" />-->
        </tx:attributes>
    </tx:advice>

    <!-- 配置事务切面 -->
    <aop:config>
        <aop:pointcut id="serviceOperation"
                      expression="execution(* com.jzy.api.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
    </aop:config>

    <!-- 支付配置 -->
    <bean class="com.jzy.api.service.biz.impl.PaywayProvider">
        <property name="payWayMap">
            <map>
                <entry key="0">
                    <bean class="com.jzy.api.service.biz.impl.WxPayServiceImpl"/>
                </entry>
                <entry key="1">
                    <bean class="com.jzy.api.service.biz.impl.AliPayServiceImpl"/>
                </entry>
                <entry key="2">
                    <bean class="com.jzy.api.service.biz.impl.XimeiPayServiceImpl"/>
                </entry>
            </map>
        </property>
    </bean>

    <!-- 静态属性注入 -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="com.jzy.api.constant.PayConfig.setDomainUrl"/>
        <property name="arguments">
            <list>
                <value>${basic_site_dns}</value>
            </list>
        </property>
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="com.jzy.api.constant.PayConfig.setH5DomainUrl"/>
        <property name="arguments">
            <list>
                <value>${h5_sit_dns}</value>
            </list>
        </property>
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="com.jzy.api.constant.PayConfig.setWxAppId"/>
        <property name="arguments">
            <list>
                <value>${wx_app_id}</value>
            </list>
        </property>
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="com.jzy.api.constant.PayConfig.setWxKey"/>
        <property name="arguments">
            <list>
                <value>${wx_key}</value>
            </list>
        </property>
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="com.jzy.api.constant.PayConfig.setWxMchId"/>
        <property name="arguments">
            <list>
                <value>${wx_mch_id}</value>
            </list>
        </property>
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="com.jzy.api.constant.PayConfig.setWxNotifyUrl"/>
        <property name="arguments">
            <list>
                <value>${wx_notify_url}</value>
            </list>
        </property>
    </bean>

</beans>
