<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	SQL映射文件名称：订单处理
	————————————————————————————————————
	修改日期		作者		变更内容
	20190426	邓冲	    创建了该文件
	————————————————————————————————————
	陕西佳之易网络科技有限公司 版本所有
 -->

<mapper namespace="com.jzy.api.dao.biz.OrderMapper">

    <resultMap id="order" type="com.jzy.api.model.biz.Order">
        <result column="id" property="orderId"/>
        <result column="code" property="code"/>
        <result column="out_trade_no" property="outTradeNo"/>
        <result column="user_id" property="userId"/>
        <result column="app_id" property="appId"/>
        <result column="sup_no" property="supNo"/>
        <result column="sup_price" property="supPrice"/>
        <result column="sup_status" property="supStatus"/>
        <result column="discount" property="discount"/>
        <result column="price" property="price"/>
        <result column="number" property="number"/>
        <result column="status" property="status"/>
        <result column="type" property="type"/>
        <result column="total_fee" property="totalFee"/>
        <result column="price_type_name" property="priceTypeName"/>
        <result column="price_type_unit" property="priceTypeUnit"/>
        <result column="acct_type" property="acctType"/>
        <result column="account" property="account"/>
        <result column="game_account" property="gameAccount"/>
        <result column="game_area" property="gameArea"/>
        <result column="game_serv" property="gameServ"/>
        <result column="trade_method" property="tradeMethod"/>
        <result column="trade_fee" property="tradeFee"/>
        <result column="dealer_price" property="dealerPrice"/>
        <result column="trade_status" property="tradeStatus"/>
        <result column="invoice_status" property="invoiceStatus"/>
        <result column="remark" property="remark"/>
        <result column="recharge_mode" property="rechargeMode"/>
        <result column="dealer_id" property="dealerId"/>
        <result column="del_flag" property="delFlag"/>
        <result column="creator_id" property="creatorId"/>
        <result column="modifier_id" property="modifierId"/>
        <result column="create_time" property="createTime"/>
        <result column="modify_time" property="modifyTime"/>
        <result column="pay_time" property="payTime"/>
        <result column="finish_time" property="finishTime"/>

        <result column="appId" property="appId"/>
        <result column="appCode" property="appCode"/>
        <result column="appName" property="appName"/>
        <result column="appIcon" property="appIcon"/>

        <result column="dealerNum" property="dealerNum"/>
        <result column="dealerName" property="dealerName"/>


        <result column="timeInterval" property="timeInterval"/>
        <result column="priceTotal" property="priceTotal"/>
        <result column="totalFeeTotal" property="totalFeeTotal"/>
        <result column="tradeFeeTotal" property="tradeFeeTotal"/>
        <result column="dealerPriceTotal" property="dealerPriceTotal"/>
    </resultMap>

    <!-- 新增订单 -->
    <insert id="insert" parameterType="com.jzy.api.model.biz.Order">
        INSERT INTO `order`(
        id, code, out_trade_no, user_id, app_id, apt_id, sup_no, sup_price, sup_status, discount,
        price, number, status, type, total_fee, price_type_name, price_type_unit,
        acct_type, account, game_account, game_area, game_serv, trade_method, trade_code,
        trade_fee, trade_status, invoice_status, remark, recharge_mode, dealer_id, dealer_price,
        del_flag, creator_id, modifier_id, create_time, modify_time
        )
        VALUES (
        #{orderId}, #{code}, #{outTradeNo}, #{userId}, #{appId}, #{aptId}, #{supNo}, #{supPrice}, #{supStatus}, #{discount},
        #{price}, #{number}, #{status}, #{type}, #{totalFee}, #{priceTypeName}, #{priceTypeUnit},
        #{acctType}, #{account}, #{gameAccount}, #{gameArea}, #{gameServ}, #{tradeMethod}, #{tradeCode},
        #{tradeFee}, #{tradeStatus}, #{invoiceStatus}, #{remark}, #{rechargeMode}, #{dealerId}, #{dealerPrice},
        #{delFlag}, #{creatorId}, #{modifierId}, #{createTime}, #{modifyTime}
        )
    </insert>

    <!-- 更新订单 -->
    <update id="update" parameterType="com.jzy.api.model.biz.Order">
        UPDATE
        `order`
        SET
        sup_status = #{supStatus},
        status = #{status},
        trade_method = #{tradeMethod},
        trade_code = #{tradeCode},
        trade_fee = #{tradeFee},
        trade_status = #{tradeStatus},
        del_flag = #{delFlag},
        invoice_status = #{invoiceStatus},
        remark = #{remark},
        pay_time = #{payTime},
        <include refid="updateCommon"/>
        <if test="code !=null and code !=''">
            ,code = #{code}
        </if>
        WHERE
        id = #{orderId}
    </update>

    <!-- 删除订单 -->
    <update id="updateOrderDelFlag">
        UPDATE
        `order`
        SET
        del_flag = 1
        WHERE
        id = #{id}
        <if test="userId != null">
            and user_id = #{userId}
        </if>
        <if test="dealerId != null">
            AND dealer_id = #{dealerId}
        </if>
    </update>

    <!-- 根据订单id查询订单详情 -->
    <select id="queryOrderById" resultMap="order">
        SELECT
        o.id, o.code, o.out_trade_no, o.user_id, o.app_id, app.name appName, o.sup_no, o.sup_price, o.sup_status, o.discount,
        o.price, o.number, o.status, o.type, o.total_fee, o.price_type_name, o.price_type_unit,
        o.acct_type, o.account, o.game_account, o.game_area, o.game_serv, o.trade_method, o.trade_code,
        o.trade_fee, o.trade_status, o.invoice_status, o.remark, o.recharge_mode, o.dealer_id,
        o.create_time, o.modify_time
        FROM
        `order` o
        INNER JOIN app_info app ON o.app_id = app.id
        WHERE
        o.id = #{orderId}
    </select>

    <!-- 根据订单id查询订单详情 -->
    <select id="queryOrderDetail" resultMap="order">
        SELECT
        o.id,
        o.code,
        o.type,
        o.acct_type,
        o.number,
        o.price_type_unit,
        o.out_trade_no,
        o.total_fee,
        o.trade_fee,
        o.trade_method,
        o.price,
        o.price_type_name,
        o.status,
        o.account,
        o.recharge_mode,
        o.create_time,
        o.pay_time,
        o.finish_time,
        o.trade_status,
        app.id appId,
        app. NAME appName,
        app.icon appIcon
        FROM
        `order` o
        INNER JOIN app_info app ON o.app_id = app.id
        WHERE
        o.id = #{id}
    </select>

    <!-- 前台订单列表查询 -->
    <select id="queryFrontOrderList" resultType="com.jzy.api.model.biz.Order">
        SELECT
        o.id orderId,
        o.out_trade_no as outTradeNo,
        o.code,
        o.price,
        o.status,
        o.total_fee totalFee,
        o.price_type_name priceTypeName,
        o.trade_fee tradeFee,
        o.create_time createTime,
        o.account as account,
        o.game_account as gameAccount,
        o.game_area as gameArea,
        o.game_serv as gameServ,
        app.id appId,
        app.name appName,
        app.icon appIcon
        FROM
        `order` o
        INNER JOIN app_info app ON o.app_id = app.id
        WHERE
        o.del_flag = 0
        AND o.user_id = #{userId}
        <if test="dealerId != null">
            AND o.dealer_id = #{dealerId}
        </if>
        <if test="status != null">
            AND o.status = #{status}
        </if>
        ORDER BY o.create_time DESC
    </select>

    <!-- 根据订单id查询卡密 -->
    <select id="queryCardPwdByIdAndCardNo" resultType="java.lang.String">
        SELECT
        card_pwd
        FROM
        order_cardkey
        WHERE
        id = #{cardPwdId}
        AND card_no = #{cardNo}
    </select>

    <!-- 更新订单状态 -->
    <update id="updateStatus">
        UPDATE
        `order`
        SET
        status = #{status}
        WHERE
        id = #{id}
        <if test="userId != null">
          and user_id = #{userId}
        </if>
        <if test="dealerId != null">
            AND dealer_id = #{dealerId}
        </if>
    </update>

    <!-- 更新订单交易状态 -->
    <update id="updateTradeStatus">
        UPDATE
        `order`
        SET
        trade_status = #{tradeStatus}
        WHERE
        id = #{id}
    </update>

    <!-- 更新支付状态 -->
    <update id="updateStatusTradeStatusSupStatus">
        UPDATE
        `order`
        SET
        status = #{status},
        trade_status = #{tradeStatus},
        sup_status = #{supStatus},
        finish_time = now()
        WHERE
        id = #{id}
        AND del_flag = 0
    </update>

    <update id="updateStatusTrade">
        UPDATE
        `order`
        SET
        status = #{status},
        trade_code = #{tradeCode},
        trade_fee = #{tradeFee},
        trade_status = #{tradeStatus}
        WHERE
        id = #{id}
    </update>

    <update id="updateStatusSupStatusTrade">
        UPDATE
        `order`
        SET
        status = #{status},
        sup_status = #{supStatus},
        trade_code = #{tradeCode},
        trade_fee = #{tradeFee},
        trade_status = #{tradeStatus}
        WHERE
        id = #{id}
    </update>

    <!-- 更新订单的支付方式，流水号，交易状态 -->
    <update id="updateStatusTradeMethod">
        UPDATE
        `order`
        SET
        status = #{status},
        trade_method = #{tradeMethod},
        out_trade_no = #{outTradeNo}
        WHERE
        id = #{id}
    </update>

    <!-- 更新sup状态 -->
    <update id="updateSupStatus">
        UPDATE
        `order`
        SET
        status = #{status},
        sup_status = #{supStatus},
        finish_time = #{finishTime}
        WHERE
        id = #{id}
    </update>

    <!-- 查询订单状态 -->
    <select id="queryOrderStatus" resultMap="order">
        SELECT
        app_id appId,
        status
        FROM
        `order`
        WHERE
        id = #{id}
    </select>

    <!-- 根据订单id查询后台订单详情 -->
    <select id="queryBackOrderById" resultMap="order">
        SELECT
        o.id,
        o.code,
        o.out_trade_no,
        o.price,
        o.number,
        o.discount,
        o.total_fee,
        o.trade_fee,
        o.price_type_name,
        o.acct_type,
        o.account,
        o.game_area,
        o.game_serv,
        o.status,
        o.sup_status,
        o.trade_method,
        o.trade_status,
        o.trade_fee,
        o.del_flag,
        o.dealer_price,
        o.create_time,
        o.pay_time,
        o.finish_time,
        app.id appId,
        app.code appCode,
        app. NAME appName,
        d.idnum dealerNum,
        d.name dealerName
        FROM
        `order` o
        INNER JOIN app_info app ON o.app_id = app.id
        INNER JOIN dealer d ON o.dealer_id = d.id
        WHERE
        o.id = #{id}
    </select>

    <!-- 订单列表查询 -->
    <select id="queryBackOrderList" resultMap="order">
        SELECT
        o.id,
        o.code,
        o.out_trade_no,
        d.idnum dealerNum,
        d. NAME dealerName,
        o.account,
        app. NAME appName,
        o.price,
        o.discount,
        o.total_fee,
        o.trade_fee,
        o.dealer_price,
        o.trade_method,
        o. status,
        o.sup_status,
        o.pay_time,
        o.create_time
        FROM
        `order` o
        INNER JOIN app_info app ON o.app_id = app.id
        INNER JOIN dealer d ON o.dealer_id = d.id
        WHERE
        1 = 1
        <if test="startDate != null and endDate != null">
            AND o.create_time >= #{startDate}
            AND o.create_time &lt; #{endDate}
        </if>
        <if test="dealerId != 0">
            AND o.dealer_id = #{dealerId}
        </if>
        <if test="inputDealerId != null">
            AND d.id = #{inputDealerId}
        </if>
        <if test="supStatus != null">
            AND o.sup_status = #{supStatus}
        </if>
        <if test="status != null">
            AND o.status = #{status}
        </if>
        <if test="key != null and key!= ''">
            AND (
            o.code LIKE concat(concat('%',#{key}),'%')
            OR o.out_trade_no LIKE concat(concat('%',#{key}),'%')
            OR o.account LIKE concat(concat('%',#{key}),'%')
            OR d.name LIKE concat(concat('%',#{key}),'%')
            )
        </if>
        ORDER BY
        o.create_time DESC
    </select>

    <!-- 已完成订单列表统计 -->
    <select id="queryPriceAndTotalFee" resultType="com.jzy.api.po.biz.BackOrderCountPo">
        SELECT
        IFNULL(SUM(price), 0) priceTotal,
        IFNULL(SUM(total_fee), 0) totalFeeTotal
        FROM
        `order` o
        INNER JOIN dealer d ON o.dealer_id = d.id
        WHERE
        1 = 1
        <if test="startDate != null and endDate != null">
            AND o.create_time >= #{startDate}
            AND o.create_time &lt; #{endDate}
        </if>
        <if test="dealerId != 0">
            AND o.dealer_id = #{dealerId}
        </if>
        <if test="inputDealerId != null">
            AND d.id = #{inputDealerId}
        </if>
        <if test="supStatus != null">
            AND o.sup_status = #{supStatus}
        </if>
        <if test="status != null">
            AND o.status = #{status}
        </if>
        <if test="key != null and key!= ''">
            AND (
            o.code LIKE concat(concat('%',#{key}),'%')
            OR o.out_trade_no LIKE concat(concat('%',#{key}),'%')
            OR o.account LIKE concat(concat('%',#{key}),'%')
            OR d.name LIKE concat(concat('%',#{key}),'%')
            )
        </if>
    </select>

    <!-- 查询实收金额 -->
    <select id="queryActualAmount" resultType="java.math.BigDecimal">
        SELECT
        IFNULL(SUM(trade_fee), 0) tradeFeeTotal
        FROM
        `order` o
        INNER JOIN dealer d ON o.dealer_id = d.id
        WHERE
        1 = 1
        <if test="startDate != null and endDate != null">
            AND o.create_time >= #{startDate}
            AND o.create_time &lt; #{endDate}
        </if>
        <if test="dealerId != 0">
            AND o.dealer_id = #{dealerId}
        </if>
        <if test="inputDealerId != null">
            AND d.id = #{inputDealerId}
        </if>
        AND o.sup_status = 2
        <if test="status != null">
            AND o.status = #{status}
        </if>
        <if test="status == null">
            AND o.status IN (1, 2, 5)
        </if>
        <if test="key != null and key!= ''">
            AND (
            o.code LIKE concat(concat('%',#{key}),'%')
            OR o.out_trade_no LIKE concat(concat('%',#{key}),'%')
            OR o.account LIKE concat(concat('%',#{key}),'%')
            OR d.name LIKE concat(concat('%',#{key}),'%')
            )
        </if>
    </select>

    <!-- 查询实付金额和代理商成本 -->
    <select id="queryTradeFeeAndDealerPrice" resultType="com.jzy.api.po.biz.BackOrderCountPo">
        SELECT
        IFNULL(SUM(trade_fee), 0) tradeFeeTotal,
        IFNULL(SUM(dealer_price), 0) dealerPriceTotal
        FROM
        `order` o
        INNER JOIN dealer d ON o.dealer_id = d.id
        WHERE
        1 = 1
        <if test="startDate != null and endDate != null">
            AND o.create_time >= #{startDate}
            AND o.create_time &lt; #{endDate}
        </if>
        <if test="dealerId != 0">
            AND o.dealer_id = #{dealerId}
        </if>
        <if test="inputDealerId != null">
            AND d.id = #{inputDealerId}
        </if>
        AND o.status = 2
        AND o.sup_status = 2
        <if test="key != null and key!= ''">
            AND (
            o.code LIKE concat(concat('%',#{key}),'%')
            OR o.out_trade_no LIKE concat(concat('%',#{key}),'%')
            OR o.account LIKE concat(concat('%',#{key}),'%')
            OR d.name LIKE concat(concat('%',#{key}),'%')
            )
        </if>
    </select>

    <!-- 月订单列表查询 -->
    <select id="queryMonthOrderList" resultMap="order">
        SELECT
        dealer_id,
        idnum dealerNum,
        name dealerName,
        modify_time timeInterval,
        IFNULL(SUM(price), 0) priceTotal,
        IFNULL(SUM(trade_fee), 0) tradeFeeTotal,
        IFNULL(SUM(dealer_price), 0) dealerPriceTotal
        FROM
            (
                SELECT
                o.dealer_id,
                d.idnum,
                d.name,
                date_format(o.modify_time, '%Y-%m') modify_time,
                o.price,
                o.trade_fee,
                o.dealer_price
                FROM
                `order` o
                INNER JOIN dealer d ON o.dealer_id = d.id
                <if test="key != null and key != ''">
                   AND d.name LIKE concat(concat('%',#{key}),'%')
                </if>
                WHERE
                o.del_flag = 0
                AND o.create_time >= #{startDate}
                AND o.create_time &lt; #{endDate}
                <if test="dealerId != 0">
                    AND o.dealer_id = #{dealerId}
                </if>
            ) a
        GROUP BY
        dealer_id,
        modify_time DESC
    </select>

    <!-- 通过主动查询第三方支付结果，更新支付状态为充值中 -->
    <update id="updateOrderStatusByActiveQuery">
        UPDATE
        `order`
        SET
        status = #{status},
        pay_time = #{payTime}
        WHERE
        id = #{id}
        AND status = 0
    </update>

    <!-- 共同更新参数 -->
    <sql id="updateCommon">
        modifier_id = #{modifierId}, modify_time = #{modifyTime}
    </sql>

    <select id="queryOrderIdByoutTradeNo" parameterType="java.lang.String" resultType="java.lang.String">
        select id from `order` where out_trade_no = #{outTradeNo}
    </select>
    <select id="queryCountByParams" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(*) from `order` where 1=1
        <if test="dealerId != null">
        and  dealer_id = #{dealerId}
        </if>
    </select>

    <!--获取所有限制次数的商品-->
    <select id="appInfoBuyTimes" resultType="java.util.Map">
         select ai_id,count from app_info_buy_times where status=1
    </select>

    <!--查询商品下单次数-->
    <select id="getOrderUserCount" resultType="java.lang.Integer">
        select count(1) from `order` where dealer_id=#{dealerId}
        and user_id=#{userId} and app_id=#{appId} and to_days(create_time)=to_days(now())
        and (status=0 or status=1 or status=2)
    </select>
</mapper>
